@using TimeForge.ViewModels.Project
@model IEnumerable<ProjectViewModel>

@{
    List<ProjectViewModel> eventProjects = Model.Where(
            p => p.DueDate != null)
        .ToList();
}

<div class="row">
    <!-- Calendar -->
    <div class="col-md-10">
            <div class="calendar-container">
                <div id="calendar"></div>
        </div>
    </div>
    
    <!-- No due date project list card -->
    <div class="col-md-2">
        <div class="card card-secondary">
            <div class="card-header">
                <h3 class="card-title">No due date projects</h3>
            </div>
            <div class="card-body" id="noDueDateList">
                <!-- Projects go below here -->
                @foreach (var project in Model.Where(p => p.DueDate == null))
                {
                    <div class="small-box bg-info draggable-project"
                         data-project-id="@project.Id"
                         data-project-isPublic="@project.IsPublic"
                         draggable="true">
                        <div class="inner">
                            <h4>@project.Name</h4>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    
    <script src="~/adminlte/plugins/fullcalendar/core/index.global.min.js"></script>
    <script src="~/adminlte/plugins/fullcalendar/web-component/index.global.min.js"></script>
    <script src="~/adminlte/plugins/fullcalendar/interaction/index.global.min.js"></script>
    <script src="~/adminlte/plugins/fullcalendar/daygrid/index.global.min.js"></script>
    <script src="~/adminlte/plugins/fullcalendar/timegrid/index.global.min.js"></script>
    
    <script>
       (function ($){
           $(function () {
               let draggableProjectsContainer = document.getElementById('noDueDateList');
               new FullCalendar.Interaction.Draggable(draggableProjectsContainer, {
                   itemSelector: '.draggable-project',
                   eventData: function (eventEl) {
                       return {
                           id: eventEl.getAttribute('data-project-id'),
                           title: eventEl.innerText.trim(),
                           isPublic: eventEl.getAttribute('data-project-isPublic')
                       }
                   }
               });

               const events = @Json.Serialize(eventProjects);
               const mappedEvents = events.map(e => ({
                   id: e.id,
                   title: e.name,
                   start: e.dueDate.split('/').reverse().join('-'),
                   allDay: true,
                   isPublic: e.isPublic
               }))

               let calendarEl = document.getElementById('calendar');
               let calendar = new FullCalendar.Calendar(calendarEl, {
                   headerToolbar: {
                       left: 'prev,next today',
                       center: 'title',
                       right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
                   },
                   editable: true,
                   droppable: true,
                   eventReceive: handleProjectDateChange, // drag from side list
                   eventDrop: handleProjectDateChange,    // move existing events
                   eventClick: handleOnClick,
                   events: mappedEvents,
               });

               function handleProjectDateChange(info) {
                   const projectId = info.event.id;
                   const dropDate = info.event.start.toISOString().split('T')[0];
                   const formatedDate = dropDate.split('-').reverse().join('/');
                   const isPublic = Boolean(info.event.isPublic);

                   $.ajax({
                       url: '/Project/UpdateDueDate',
                       type: 'POST',
                       dataType: 'json',
                       data: {
                           id: projectId,
                           dueDate: formatedDate,
                           name: info.event.title,
                           isPublic: isPublic
                       },
                       success: function (request) {
                           if (request.success) {
                               alert('Due date updated successfully');
                               if (info.draggedEl) {
                                   info.draggedEl.parentNode.removeChild(info.draggedEl);
                               }
                           } else {
                               alert('Failed to update due date');
                               info.revert();
                           }
                       },
                       error: function () {
                           alert('Failed to update due date');
                           info.revert();
                       }
                   });
               }
               
               function handleOnClick(info){
                   const projectId = info.event.id;
                   const url = "@Url.Action("Details", "Project")";
                   
                   window.location.href = `${url}?projectId=${projectId}`
               }
               calendar.render();
           })
       })(jQuery);
   </script>
}