@using TimeForge.ViewModels.Project
@model ProjectInputModel


<div class="mb-4">
    <!-- Input + Button -->
    <div class="input-group mb-3">
        <input type="text" id="newTagInput" class="form-control" placeholder="Enter tag name..." />
        <button type="button" class="btn btn-outline-primary" onclick="addTag()">Add Tag</button>
    </div>

    <!-- Tag List -->
    <div id="tagList">
        @if (Model.Tags != null)
        {
            for (int i = 0; i < Model.Tags.Count; i++)
            {
                <div class="d-inline-block me-1 mb-1 tag-wrapper">
                    <span class="badge bg-secondary">
                        @Model.Tags[i].Name
                        <button type="button" class="btn btn-sm btn-close ms-2" aria-label="Remove"
                                onclick="removeTag(this)" style="font-size: 0.6rem; line-height: 0.8;">
                        </button>
                    </span>
                    <input type="hidden" name="Tags[@i].Name" value="@Model.Tags[i].Name" />
                </div>
            }
        }
    </div>
</div>
<script>
        function addTag() {
            const input = document.getElementById('newTagInput');
            const tagList = document.getElementById('tagList');
            const tagName = input.value.trim();

            if (!tagName) return;

            // Check for duplicates
            const existing = [...tagList.querySelectorAll('input[type="hidden"]')]
                .map(x => x.value.toLowerCase());
            if (existing.includes(tagName.toLowerCase())) {
                input.value = '';
                return;
            }

            const index = tagList.querySelectorAll('.tag-wrapper').length;

            // Create a tag wrapper
            const wrapper = document.createElement('div');
            wrapper.className = 'd-inline-block me-1 mb-1 tag-wrapper';

            // Badge with the remove button
            const badge = document.createElement('span');
            badge.className = 'badge bg-secondary';
            badge.innerHTML = `${tagName}
                <button type="button" class="btn btn-sm btn-close ms-2" aria-label="Remove"
                        onclick="removeTag(this)" style="font-size: 0.6rem; line-height: 0.8;"></button>`;

            // Hidden input
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = `Tags[${index}].Name`;
            hiddenInput.value = tagName;

            wrapper.appendChild(badge);
            wrapper.appendChild(hiddenInput);
            tagList.appendChild(wrapper);

            input.value = '';
        }

        function removeTag(button) {
            const wrapper = button.closest('.tag-wrapper');
            wrapper.remove();
        }
</script>